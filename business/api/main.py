from fastapi import FastAPI, HTTPException, Depends
from fastapi.responses import JSONResponse
from sqlalchemy.orm import Session
from typing import List

from database.models import models
from business.validation import schemas
from database.repository import crud
from database.config.database import SessionLocal, engine

# Cr√©er les tables
models.Base.metadata.create_all(bind=engine)

app = FastAPI(
    title="API CRUD FastAPI",
    description="Une API compl√®te avec toutes les op√©rations CRUD",
    version="1.0.0"
)

# D√©pendance pour obtenir la session de base de donn√©es
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/")
def read_root():
    return {"message": "Bienvenue dans l'API CRUD FastAPI!", "docs": "/docs"}

# Endpoints pour les utilisateurs
@app.post("/users/", response_model=schemas.User, tags=["Users"])
def create_user(user: schemas.UserCreate, db: Session = Depends(get_db)):
    """Cr√©er un nouvel utilisateur"""
    db_user = crud.get_user_by_email(db, email=user.email)
    if db_user:
        raise HTTPException(status_code=400, detail="L'email est d√©j√† enregistr√©")
    return crud.create_user(db=db, user=user)

@app.get("/users/", response_model=List[schemas.User], tags=["Users"])
def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    """R√©cup√©rer tous les utilisateurs avec leurs articles"""
    users = crud.get_users(db, skip=skip, limit=limit)
    return users

@app.get("/users/{user_id}", response_model=schemas.User, tags=["Users"])
def read_user(user_id: int, db: Session = Depends(get_db)):
    """R√©cup√©rer un utilisateur par son ID avec ses articles"""
    db_user = crud.get_user(db, user_id=user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="Utilisateur non trouv√©")
    return db_user

@app.get("/users/{user_id}/items/", response_model=List[schemas.Item], tags=["Users", "Items"])
def read_user_items(user_id: int, skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    """R√©cup√©rer tous les articles d'un utilisateur sp√©cifique"""
    # V√©rifier que l'utilisateur existe
    db_user = crud.get_user(db, user_id=user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="Utilisateur non trouv√©")
    
    items = crud.get_items_by_user(db, user_id=user_id, skip=skip, limit=limit)
    return items

@app.put("/users/{user_id}", response_model=schemas.User, tags=["Users"])
def update_user(user_id: int, user: schemas.UserUpdate, db: Session = Depends(get_db)):
    """Mettre √† jour un utilisateur"""
    db_user = crud.update_user(db, user_id=user_id, user=user)
    if db_user is None:
        raise HTTPException(status_code=404, detail="Utilisateur non trouv√©")
    return db_user

@app.delete("/users/{user_id}", tags=["Users"])
def delete_user(user_id: int, db: Session = Depends(get_db)):
    """Supprimer un utilisateur et tous ses articles (CASCADE)"""
    # V√©rifier que l'utilisateur existe d'abord
    db_user = crud.get_user(db, user_id=user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="Utilisateur non trouv√©")
    
    # Compter les articles qui seront supprim√©s
    items_count = len(db_user.items)
    
    success = crud.delete_user(db, user_id=user_id)
    if not success:
        raise HTTPException(status_code=404, detail="Erreur lors de la suppression")
    
    message = f"Utilisateur supprim√© avec succ√®s"
    if items_count > 0:
        message += f" (avec {items_count} article(s) associ√©(s))"
    
    return {"message": message, "articles_supprim√©s": items_count}

# Endpoints pour les articles
@app.post("/users/{user_id}/items/", response_model=schemas.Item, tags=["Items"])
def create_item_for_user(
    user_id: int, item: schemas.ItemCreate, db: Session = Depends(get_db)
):
    """Cr√©er un nouvel article pour un utilisateur"""
    # V√©rifier que l'utilisateur existe
    db_user = crud.get_user(db, user_id=user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="Utilisateur non trouv√©. Vous devez d'abord cr√©er un utilisateur.")
    return crud.create_user_item(db=db, item=item, user_id=user_id)

@app.get("/items/", response_model=List[schemas.Item], tags=["Items"])
def read_items(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    """R√©cup√©rer tous les articles"""
    items = crud.get_items(db, skip=skip, limit=limit)
    return items

@app.get("/items/{item_id}", response_model=schemas.Item, tags=["Items"])
def read_item(item_id: int, db: Session = Depends(get_db)):
    """R√©cup√©rer un article par son ID"""
    db_item = crud.get_item(db, item_id=item_id)
    if db_item is None:
        raise HTTPException(status_code=404, detail="Article non trouv√©")
    return db_item

@app.put("/items/{item_id}", response_model=schemas.Item, tags=["Items"])
def update_item(item_id: int, item: schemas.ItemUpdate, db: Session = Depends(get_db)):
    """Mettre √† jour un article"""
    db_item = crud.update_item(db, item_id=item_id, item=item)
    if db_item is None:
        raise HTTPException(status_code=404, detail="Article non trouv√©")
    return db_item

@app.delete("/items/{item_id}", tags=["Items"])
def delete_item(item_id: int, db: Session = Depends(get_db)):
    """Supprimer un article"""
    success = crud.delete_item(db, item_id=item_id)
    if not success:
        raise HTTPException(status_code=404, detail="Article non trouv√©")
    return {"message": "Article supprim√© avec succ√®s"}

# Endpoint de recherche
@app.get("/search/items", response_model=List[schemas.Item], tags=["Search"])
def search_items(q: str, limit: int = 50, db: Session = Depends(get_db)):
    """
    Rechercher des articles par mot-cl√© dans le titre ou la description
    
    Args:
        q: Terme de recherche (minimum 2 caract√®res)
        limit: Nombre maximum de r√©sultats (d√©faut: 50, max: 100)
    """
    if len(q.strip()) < 2:
        raise HTTPException(status_code=400, detail="Le terme de recherche doit contenir au moins 2 caract√®res")
    
    if limit > 100:
        limit = 100
    
    # Recherche dans la base de donn√©es
    items = crud.search_items(db, query=q.strip(), limit=limit)
    return items

if __name__ == "__main__":
    import uvicorn
    import socket
    
    def is_port_in_use(port):
        """V√©rifier si un port est d√©j√† utilis√©"""
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            return s.connect_ex(('localhost', port)) == 0
    
    # Trouver un port disponible
    port = 8000
    while is_port_in_use(port) and port < 8010:
        print(f"‚ö†Ô∏è  Port {port} d√©j√† utilis√©, essai du port {port + 1}...")
        port += 1
    
    if port >= 8010:
        print("‚ùå Aucun port disponible entre 8000 et 8009")
        exit(1)
    
    print(f"üöÄ D√©marrage de l'API sur le port {port}")
    print(f"üìö Documentation disponible sur: http://localhost:{port}/docs")
    
    uvicorn.run(app, host="0.0.0.0", port=port)
